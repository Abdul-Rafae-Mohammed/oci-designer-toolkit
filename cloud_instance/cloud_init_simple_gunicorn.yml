#cloud-config
packages:
  - nginx
  - oci-utils
  - python36
  - python-oci-cli

write_files:
  # Add aliases to bash (Note: At time of writing the append flag does not appear to be working)
  - path: /etc/.bashrc
    append: true
    content: |
      alias lh='ls -lash'
      alias lt='ls -last'
      alias env='/usr/bin/env | sort'
      alias whatsmyip='curl -X GET https://www.whatismyip.net | grep ipaddress'
      export PYTHONPATH=":/home/opc/okit/visualiser:/home/opc/okit/okitweb:/home/opc/okit"

  # Change Default nginx Config (Simple Gunicorn)
  - path: /etc/nginx/nginx.conf
    permissions: '0644'
    content: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log;
      pid /run/nginx.pid;

      # Load dynamic modules. See /usr/share/nginx/README.dynamic.
      include /usr/share/nginx/modules/*.conf;

      events {
        worker_connections 1024;
      }

      http {
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          sendfile            on;
          tcp_nopush          on;
          tcp_nodelay         on;
          keepalive_timeout   65;
          types_hash_max_size 2048;

          include             /etc/nginx/mime.types;
          default_type        application/octet-stream;

          # Load modular configuration files from the /etc/nginx/conf.d directory.
          # See http://nginx.org/en/docs/ngx_core_module.html#include
          # for more information.
          include /etc/nginx/conf.d/*.conf;

          server {
              listen       80 default_server;
              server_name  _;
              root         /usr/share/nginx/html;

              # Load configuration files for the default server block.
              include /etc/nginx/default.d/*.conf;

              location / {
                  proxy_pass http://127.0.0.1:5000/;
                  proxy_redirect   off;
                  proxy_set_header Host $http_host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              error_page 404 /404.html;
                  location = /40x.html {
              }

              error_page 500 502 503 504 /50x.html;
                  location = /50x.html {
              }
          }
      }

  # Write GUnicorn Service (Simple Gunicorn)
  - path: /etc/systemd/system/gunicorn.service
    permissions: '0755'
    content: |
      [Unit]
      Description=gunicorn daemon
      After=network.target

      [Service]
      Type=notify
      # the specific user that our service will run as
      User=opc
      Group=opc
      Environment="PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/opc/.local/bin:/home/opc/bin"
      Environment="PYTHONPATH=:/home/opc/okit/visualiser:/home/opc/okit/okitweb:/home/opc/okit"
      RuntimeDirectory=gunicorn
      WorkingDirectory=/home/opc/okit
      ExecStart=/usr/local/bin/gunicorn --workers=4 --limit-request-line 0 --bind=0.0.0.0:5000 okitweb.wsgi:app
      ExecReload=/bin/kill -s HUP $MAINPID
      KillMode=mixed
      TimeoutStopSec=5
      PrivateTmp=true

      [Install]
      WantedBy=multi-user.target

runcmd:
  # Create okit directory
  - mkdir -p /home/opc/okit
  - chmod -R 777 /home/opc/okit
  # Config SELinux
  - sudo setsebool -P httpd_can_network_connect 1
  # Reload
  - systemctl daemon-reload
  # Enable nginx
  - sudo systemctl enable nginx.service
  - sudo systemctl start nginx.service
  # Enable GUnicorn
  - sudo pip3 install configparser flask flask-cors flask_restful gunicorn ipaddress ipcalc jinja2 oci pexpect pyyaml
  - sudo pip3 install requests simplejson six svglib svg.path wtforms xlrd
  - sudo systemctl enable gunicorn.service
  - sudo systemctl restart gunicorn.service
  # Set Firewall Rules
  - sudo firewall-offline-cmd  --add-port=80/tcp
  - sudo firewall-offline-cmd  --add-port=5000/tcp
  - sudo systemctl restart firewalld
  # Add additional environment information because append does not appear to work in write_file
  - sudo bash -c "echo 'source /etc/.bashrc' >> /etc/bashrc"

final_message: "**** The system is finally up, after $UPTIME seconds ****"
